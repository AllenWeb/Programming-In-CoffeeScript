(function() {
  var build, exec, fs, print, spawn, watchTree, _ref;

  fs = require('fs');

  print = require('sys').print;

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  watchTree = require('watch-tree').watchTree;

  build = function(watch, callback) {
    var coffee, options;
    if (typeof watch === 'function') {
      callback = watch;
      watch = false;
    }
    options = ['-c', '-o', 'lib', 'src'];
    if (watch) options.unshift('-w');
    coffee = spawn('coffee', options);
    coffee.stdout.on('data', function(data) {
      return print(data.toString());
    });
    coffee.stderr.on('data', function(data) {
      return print(data.toString());
    });
    return coffee.on('exit', function(status) {
      if (status === 0) {
        return typeof callback === "function" ? callback() : void 0;
      }
    });
  };

  task('docs', 'Generate annotated source code with Docco', function() {
    return fs.readdir('src', function(err, contents) {
      var docco, file, files;
      files = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = contents.length; _i < _len; _i++) {
          file = contents[_i];
          if (/\.coffee$/.test(file)) _results.push("src/" + file);
        }
        return _results;
      })();
      docco = spawn('docco', files);
      docco.stdout.on('data', function(data) {
        return print(data.toString());
      });
      docco.stderr.on('data', function(data) {
        return print(data.toString());
      });
      return docco.on('exit', function(status) {
        if (status === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
      });
    });
  });

  task('build', 'Compile CoffeeScript source files', function() {
    return build();
  });

  task('watch', 'Recompile CoffeeScript source files when modified', function() {
    return build(true);
  });

  task('test', 'Run the test suite (and re-run if anything changes)', function() {
    var suite;
    suite = null;
    return build(function() {
      var libWatcher, runTests, testWatcher;
      (runTests = function() {
        var runNextTestSuite, suiteIndex, suiteNames;
        if (suite != null) suite.kill();
        suiteNames = ['integration'];
        suiteIndex = 0;
        (runNextTestSuite = function() {
          var suiteName;
          if (!(suiteName = suiteNames[suiteIndex])) return;
          suite = spawn("coffee", ["-e", "{reporters} = require 'nodeunit'; reporters.default.run ['" + suiteName + ".coffee']"], {
            cwd: 'test'
          });
          suite.stdout.on('data', function(data) {
            return print(data.toString());
          });
          suite.stderr.on('data', function(data) {
            return print(data.toString());
          });
          return suite.on('exit', function() {
            suiteIndex++;
            return runNextTestSuite();
          });
        })();
        return invoke('docs');
      })();
      testWatcher = watchTree('test', {
        'sample-rate': 5
      });
      testWatcher.on('fileModified', runTests);
      libWatcher = watchTree('src', {
        'sample-rate': 5
      });
      return libWatcher.on('fileModified', function() {
        return build(function() {
          return runTests();
        });
      });
    });
  });

}).call(this);
